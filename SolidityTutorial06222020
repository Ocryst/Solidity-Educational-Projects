pragma solidity 0.5.1;

contract MySmartContract {
    mapping(address => uint256) public balances;
    address payable wallet;
    
    event Purchase (address indexed _buyer, uint256 _amount);
    
    constructor(address payable _wallet) public {
        wallet = _wallet;
    }
    
    function() external payable {
        buyToken();
    }
    
    function buyToken() public payable {
        //buy a token
        balances[msg.sender] += 1;
        //send ether to the wallet
        wallet.transfer(msg.value);
        emit Purchase(msg.sender, 1);
        
    }
}

//Beginning of 2 smart contract interaction
//utilizing an ERC20Token
contract ERC20Token {
    string public name;
    mapping(address => uint256) public balances;
    
    function mint() public {
        balances[tx.origin] ++;
    }
}

contract MySmartContract2 {
    mapping(address => uint256) public balances;
    address payable wallet;
    address public token;
    
    event Purchase (address indexed _buyer, uint256 _amount);
    
    constructor(address payable _wallet, address _token) public {
        wallet = _wallet;
        token = _token;
    }
    
    function() external payable {
        buyToken();
    }
    
    function buyToken() public payable {
        //one way of doing this is by setting ERC20Token
        //to be a local variable for minting
       ERC20Token _token = ERC20Token(address(token));
       _token.mint();
        wallet.transfer(msg.value);
        
    }
}
